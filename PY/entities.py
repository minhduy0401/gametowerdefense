import math
import random
import pygame
from dataclasses import dataclass
from typing import List, Tuple, Optional, Dict

from config import PROJECTILE_SPEED, WIDTH, HEIGHT, TOWER_UPGRADE
from utils import grid_to_px


@dataclass
class Enemy:
    path: List[Tuple[float, float]]
    max_hp: float
    speed: float
    reward: int
    etype: str = "normal"
    x: float = 0.0
    y: float = 0.0
    hp: float = 1.0
    idx: int = 0
    alive: bool = True
    reached_end: bool = False
    slow_mul: float = 1.0
    slow_timer: float = 0.0
    # üÜï Enhanced enemy features
    size_mul: float = 1.0      # K√≠ch th∆∞·ªõc hi·ªÉn th·ªã (0.8 cho scout, 1.6 cho boss)
    slow_resist: float = 0.0   # Kh√°ng slow (0.5 cho tank = ch·ªâ b·ªã slow 50%)
    regen_rate: float = 0.0    # H·ªìi m√°u/gi√¢y (5 cho commander)
    regen_timer: float = 0.0   # Timer cho regeneration
    
    # üÜï Poison DoT system
    poison_damage: float = 0.0  # S√°t th∆∞∆°ng ƒë·ªôc m·ªói gi√¢y
    poison_timer: float = 0.0   # Th·ªùi gian c√≤n l·∫°i c·ªßa poison
    poison_tick_timer: float = 0.0  # Timer ƒë·ªÉ tick poison damage
    
    # üÜï Junction system
    junction_paths: Optional[List[List[Tuple[float, float]]]] = None
    switch_count: int = 0       # S·ªë l·∫ßn ƒë√£ chuy·ªÉn path
    last_switch_idx: int = -1   # Waypoint cu·ªëi c√πng ƒë√£ switch ƒë·ªÉ tr√°nh switch li√™n t·ª•c
    
    def __post_init__(self):
        self.x, self.y = self.path[0]
        self.hp = self.max_hp
        self.idx = 1
        self.regen_timer = 1.0  # B·∫Øt ƒë·∫ßu regen sau 1 gi√¢y
        self.junction_paths = []
    
    def set_junction_paths(self, junction_paths: List[List[Tuple[float, float]]]):
        """Thi·∫øt l·∫≠p c√°c ƒë∆∞·ªùng junction m√† enemy c√≥ th·ªÉ chuy·ªÉn sang"""
        self.junction_paths = junction_paths if junction_paths else []
    
    def _check_junction_switch(self):
        """Ki·ªÉm tra v√† chuy·ªÉn sang junction path n·∫øu c√≥ th·ªÉ"""
        # üîß ENHANCED safety checks
        if not self.junction_paths:
            return
        if self.idx >= len(self.path):
            return
        if self.idx == self.last_switch_idx:  # Tr√°nh switch li√™n t·ª•c t·∫°i c√πng waypoint
            return
        if not self.alive:  # Kh√¥ng switch n·∫øu enemy ƒë√£ ch·∫øt
            return
            
        current_pos = (self.x, self.y)
        
        # üÜï T·∫•t c·∫£ enemy ƒë·ªÅu c√≥ kh·∫£ nƒÉng chuy·ªÉn ƒë∆∞·ªùng cao - t·∫°o nhi·ªÅu tuy·∫øn ƒë∆∞·ªùng
        if self.etype == "tank":
            max_switches = 3
            switch_chance = 0.8  # Tank r·∫•t hay chuy·ªÉn ƒë∆∞·ªùng
        elif self.etype == "fast":
            max_switches = 2  
            switch_chance = 0.6  # Fast enemy chuy·ªÉn ƒë∆∞·ªùng nhanh
        elif self.etype == "boss":
            max_switches = 2
            switch_chance = 0.5  # Boss c√≥ chi·∫øn thu·∫≠t
        else:  # normal
            max_switches = 2
            switch_chance = 0.5  # Normal enemy c≈©ng c√≥ th·ªÉ chuy·ªÉn ƒë∆∞·ªùng
        
        # N·∫øu ƒë√£ chuy·ªÉn qu√° nhi·ªÅu l·∫ßn th√¨ d·ª´ng
        if self.switch_count >= max_switches:
            return
        
        # üÜï C·∫£i ti·∫øn junction switching - ki·ªÉm tra t·∫•t c·∫£ junction paths v√† ch·ªçn t·ªët nh·∫•t
        best_junction = None
        best_distance = float('inf')
        
        # T√¨m junction path g·∫ßn nh·∫•t
        for i, junction_path in enumerate(self.junction_paths):
            if len(junction_path) < 2:
                continue
                
            start_pos = junction_path[0]
            # Ki·ªÉm tra kho·∫£ng c√°ch ƒë·∫øn ƒëi·ªÉm ƒë·∫ßu junction
            dist = math.hypot(current_pos[0] - start_pos[0], 
                             current_pos[1] - start_pos[1])
            
            # N·∫øu ƒë·ªß g·∫ßn v√† g·∫ßn h∆°n c√°c junction kh√°c
            if dist < 96 and dist < best_distance:  # TƒÉng b√°n k√≠nh t·ª´ 64‚Üí96px
                best_junction = (i, junction_path, dist)
                best_distance = dist
        
        # N·∫øu t√¨m th·∫•y junction ph√π h·ª£p, th·ª≠ chuy·ªÉn
        if best_junction and random.random() < switch_chance:
            i, junction_path, dist = best_junction
            print(f"üîÑ {self.etype.upper()} switching to junction path {i} (switch #{self.switch_count + 1}, dist: {dist:.1f})")
            
            # üîß SAFETY CHECK: ƒê·∫£m b·∫£o junction path h·ª£p l·ªá
            if len(junction_path) >= 2:
                self.path = junction_path
                # üîß T√¨m waypoint g·∫ßn nh·∫•t trong junction path thay v√¨ hardcode idx=1
                closest_idx = 0
                closest_dist = float('inf')
                current_pos = (self.x, self.y)
                
                for wp_idx, (wp_x, wp_y) in enumerate(junction_path):
                    wp_dist = math.hypot(current_pos[0] - wp_x, current_pos[1] - wp_y)
                    if wp_dist < closest_dist:
                        closest_dist = wp_dist
                        closest_idx = wp_idx
                
                # B·∫Øt ƒë·∫ßu t·ª´ waypoint ti·∫øp theo (kh√¥ng quay l·∫°i)
                self.idx = min(closest_idx + 1, len(junction_path) - 1)
                self.switch_count += 1
                self.last_switch_idx = self.idx
                
                print(f"   ‚Üí Started at waypoint {self.idx}/{len(junction_path)-1}, closest was {closest_idx}")
            else:
                print(f"   ‚ùå Junction path {i} too short ({len(junction_path)} waypoints), skipping")

    def update(self, dt: float):
        if not self.alive or self.reached_end:
            return
            
        # üÜï Regeneration (commander feature)
        if self.regen_rate > 0:
            self.regen_timer -= dt
            if self.regen_timer <= 0:
                if self.hp < self.max_hp and self.hp > 0:
                    self.hp = min(self.max_hp, self.hp + self.regen_rate * dt)
                    
        # Slow effect handling
        if self.slow_timer > 0:
            self.slow_timer -= dt
            if self.slow_timer <= 0:
                self.slow_mul = 1.0
        
        # üÜï Poison DoT handling
        if self.poison_timer > 0:
            self.poison_timer -= dt
            self.poison_tick_timer -= dt
            
            # Tick poison damage m·ªói gi√¢y
            if self.poison_tick_timer <= 0:
                self.hit(self.poison_damage)  # G√¢y poison damage
                self.poison_tick_timer = 1.0  # Reset tick timer cho 1 gi√¢y ti·∫øp theo
            
            # H·∫øt th·ªùi gian poison
            if self.poison_timer <= 0:
                self.poison_damage = 0.0
                self.poison_tick_timer = 0.0
                
        # üîß MOVEMENT v·ªõi safety checks
        if self.idx >= len(self.path):
            self.reached_end = True
            return
            
        # üîß ƒê·∫£m b·∫£o idx kh√¥ng v∆∞·ª£t qu√° path bounds
        if self.idx < 0:
            self.idx = 0
        if self.idx >= len(self.path):
            self.reached_end = True
            return
            
        tx, ty = self.path[self.idx]
        dx, dy = tx - self.x, ty - self.y
        dist = math.hypot(dx, dy)
        
        # üîß N·∫øu qu√° g·∫ßn waypoint hi·ªán t·∫°i, chuy·ªÉn sang waypoint ti·∫øp theo
        if dist < 1e-6:
            self.idx += 1
            # üîß Check bounds sau khi tƒÉng idx
            if self.idx >= len(self.path):
                self.reached_end = True
            return
            
        dirx, diry = dx / dist, dy / dist
        step = self.speed * self.slow_mul * dt
        
        if step >= dist:
            # ƒê√£ ƒë·∫øn waypoint target
            self.x, self.y = tx, ty
            self.idx += 1
            
            # üîß Check bounds tr∆∞·ªõc khi junction switch
            if self.idx < len(self.path):
                # üÜï Check junction khi ƒë·∫øn waypoint m·ªõi
                self._check_junction_switch()
            else:
                self.reached_end = True
        else:
            # Di chuy·ªÉn v·ªÅ ph√≠a waypoint target
            self.x += dirx * step
            self.y += diry * step

    def hit(self, dmg: float):
        if not self.alive:
            return False
        self.hp -= dmg
        if self.hp <= 0:
            self.alive = False
            return True
        return False

    def apply_slow(self, mul: float, t: float):
        # üÜï Apply slow resistance (tank feature)
        if self.slow_resist > 0:
            # Gi·∫£m hi·ªáu qu·∫£ slow d·ª±a tr√™n kh√°ng slow
            effective_mul = 1.0 - ((1.0 - mul) * (1.0 - self.slow_resist))
            effective_time = t * (1.0 - self.slow_resist * 0.5)  # Gi·∫£m th·ªùi gian slow
            self.slow_mul = min(self.slow_mul, effective_mul)
            self.slow_timer = max(self.slow_timer, effective_time)
        else:
            # Slow b√¨nh th∆∞·ªùng
            self.slow_mul = min(self.slow_mul, mul)
            self.slow_timer = max(self.slow_timer, t)
    
    def apply_poison(self, poison_dmg: float, poison_time: float):
        """üÜï √Åp d·ª•ng hi·ªáu ·ª©ng poison DoT"""
        # N·∫øu ƒë√£ b·ªã poison, l√†m m·ªõi th·ªùi gian v√† c·ªông damage
        if self.poison_timer > 0:
            self.poison_damage = max(self.poison_damage, poison_dmg)  # L·∫•y poison m·∫°nh h∆°n
            self.poison_timer = max(self.poison_timer, poison_time)   # L√†m m·ªõi th·ªùi gian
        else:
            self.poison_damage = poison_dmg
            self.poison_timer = poison_time
        self.poison_tick_timer = 1.0  # Tick ƒë·∫ßu ti√™n sau 1 gi√¢y

    def pos(self) -> Tuple[float, float]:
        return self.x, self.y


@dataclass 
class DamageText:
    """Hi·ªáu ·ª©ng text s√°t th∆∞∆°ng bay l√™n"""
    x: float
    y: float
    damage: int
    max_duration: float = 1.0
    time_left: float = 1.0
    alive: bool = True
    
    def __post_init__(self):
        self.time_left = self.max_duration
        self.start_y = self.y
        
    def update(self, dt: float):
        if not self.alive:
            return
            
        self.time_left -= dt
        if self.time_left <= 0:
            self.alive = False
            return
            
        # Text bay l√™n v√† m·ªù d·∫ßn
        self.y = self.start_y - (1 - self.time_left / self.max_duration) * 40
        
    def draw(self, screen):
        if not self.alive:
            return
            
        alpha_factor = self.time_left / self.max_duration
        alpha = int(255 * alpha_factor)
        
        if alpha > 0:
            # Ch·ªçn m√†u d·ª±a tr√™n s√°t th∆∞∆°ng
            if self.damage >= 100:
                color = (255, 100, 100)  # ƒê·ªè cho s√°t th∆∞∆°ng cao
            elif self.damage >= 50:
                color = (255, 200, 100)  # Cam cho s√°t th∆∞∆°ng trung b√¨nh  
            else:
                color = (255, 255, 100)  # V√†ng cho s√°t th∆∞∆°ng th·∫•p
                
            # V·∫Ω text
            font = pygame.font.Font(None, 24)
            text_surface = font.render(str(self.damage), True, color)
            screen.blit(text_surface, (int(self.x - text_surface.get_width()//2), int(self.y)))


@dataclass
class DeathEffect:
    """Hi·ªáu ·ª©ng khi ƒë·ªãch ch·∫øt"""
    x: float
    y: float
    enemy_type: str
    max_duration: float = 1.0
    time_left: float = 1.0
    particles: Optional[List[dict]] = None
    alive: bool = True
    
    def __post_init__(self):
        self.time_left = self.max_duration
        
        # T·∫°o particles d·ª±a tr√™n lo·∫°i ƒë·ªãch v·ªõi hi·ªáu ·ª©ng ƒë·∫∑c bi·ªát
        self.particles = []
        if self.enemy_type == "boss":
            num_particles = 12
            speed_range = (80, 200)
            self.max_duration = 1.5  # Boss ch·∫øt l√¢u h∆°n
        elif self.enemy_type == "tank":
            num_particles = 8
            speed_range = (60, 160)
            self.max_duration = 1.2
        elif self.enemy_type == "fast":
            num_particles = 6
            speed_range = (100, 220)  # Fast ƒë·ªãch ch·∫øt nhanh v·ªõi particles nhanh
            self.max_duration = 0.8
        else:  # normal
            num_particles = 5
            speed_range = (50, 150)
        
        self.time_left = self.max_duration
        
        for _ in range(num_particles):
            angle = random.uniform(0, 2 * math.pi)
            speed = random.uniform(*speed_range)
            particle_size = random.uniform(3, 8) if self.enemy_type == "boss" else random.uniform(2, 6)
            self.particles.append({
                'x': self.x,
                'y': self.y,
                'vx': math.cos(angle) * speed,
                'vy': math.sin(angle) * speed,
                'life': 1.0,
                'size': particle_size,
                'rotation': random.uniform(0, 360),  # ƒê·ªÉ t·∫°o hi·ªáu ·ª©ng xoay
                'rot_speed': random.uniform(-360, 360)
            })
    
    def update(self, dt: float):
        if not self.alive:
            return
            
        self.time_left -= dt
        if self.time_left <= 0:
            self.alive = False
            return
            
        # Update particles
        if self.particles:
            for particle in self.particles:
                particle['x'] += particle['vx'] * dt
                particle['y'] += particle['vy'] * dt
                particle['vy'] += 200 * dt  # Gravity
                particle['vx'] *= 0.98  # Friction
                particle['life'] = self.time_left / self.max_duration
                particle['rotation'] += particle['rot_speed'] * dt
            
    def draw(self, screen):
        if not self.alive:
            return
            
        # Ch·ªçn m√†u d·ª±a tr√™n lo·∫°i ƒë·ªãch
        if self.enemy_type == "boss":
            base_color = (160, 100, 200)  # Purple
        elif self.enemy_type == "tank":
            base_color = (200, 60, 60)    # Red
        elif self.enemy_type == "fast":
            base_color = (120, 200, 120)  # Green
        else:
            base_color = (140, 140, 120)  # Gray
            
        # V·∫Ω particles
        if self.particles:
            alpha_factor = self.time_left / self.max_duration
            for particle in self.particles:
                alpha = int(255 * alpha_factor * particle['life'])
                if alpha > 0:
                    size = max(1, int(particle['size'] * alpha_factor))
                    color = (
                        min(255, int(base_color[0] + (255 - base_color[0]) * (1 - alpha_factor))),
                        min(255, int(base_color[1] + (255 - base_color[1]) * (1 - alpha_factor))),
                        min(255, int(base_color[2] + (255 - base_color[2]) * (1 - alpha_factor)))
                    )
                    
                    # V·∫Ω particle v·ªõi hi·ªáu ·ª©ng ƒë·∫∑c bi·ªát cho boss
                    try:
                        if self.enemy_type == "boss":
                            # Boss c√≥ hi·ªáu ·ª©ng s√°ng l√≥a
                            pygame.draw.circle(screen, (255, 255, 255), 
                                             (int(particle['x']), int(particle['y'])), size + 2)
                        pygame.draw.circle(screen, color, 
                                         (int(particle['x']), int(particle['y'])), size)
                    except:
                        pass  # Ignore if particle is out of screen


@dataclass
class Projectile:
    x: float
    y: float
    vx: float
    vy: float
    damage: float
    target: Optional[Enemy]
    splash: float = 0.0
    slow_mul: float = 1.0
    slow_time: float = 0.0
    poison_damage: float = 0.0  # üÜï Poison damage per second
    poison_time: float = 0.0    # üÜï Poison duration
    alive: bool = True
    # üÜï C√°c thu·ªôc t√≠nh m·ªõi cho hi·ªáu ·ª©ng ƒë·∫∑c bi·ªát
    projectile_type: str = "basic"  # basic, laser, rocket, electric, poison, flame, ice, etc.
    trail_points: Optional[List] = None  # ƒê·ªÉ t·∫°o ƒëu√¥i ƒë·∫°n
    rotation: float = 0.0  # G√≥c xoay c·ªßa ƒë·∫°n
    lifetime: float = 0.0  # Th·ªùi gian s·ªëng
    max_lifetime: float = 3.0  # Th·ªùi gian s·ªëng t·ªëi ƒëa
    special_data: Optional[Dict] = None  # D·ªØ li·ªáu ƒë·∫∑c bi·ªát cho t·ª´ng lo·∫°i ƒë·∫°n
    
    def __post_init__(self):
        if self.trail_points is None:
            self.trail_points = []
        if self.special_data is None:
            self.special_data = {}

    def update(self, dt: float, enemies: List[Enemy]):
        if not self.alive:
            return
            
        # üÜï C·∫≠p nh·∫≠t th·ªùi gian s·ªëng v√† hi·ªáu ·ª©ng ƒë·∫∑c bi·ªát
        self.lifetime += dt
        if self.lifetime > self.max_lifetime:
            self.alive = False
            return
            
        # üÜï C·∫≠p nh·∫≠t g√≥c xoay d·ª±a tr√™n h∆∞·ªõng di chuy·ªÉn
        if abs(self.vx) > 1e-6 or abs(self.vy) > 1e-6:
            self.rotation = math.atan2(self.vy, self.vx)
            
        # üÜï Th√™m ƒëi·ªÉm v√†o trail (ƒëu√¥i ƒë·∫°n)
        if self.projectile_type in ["laser", "rocket", "electric", "ice"] and self.trail_points is not None:
            self.trail_points.append((self.x, self.y, self.lifetime))
            # Gi·ªØ t·ªëi ƒëa 10 ƒëi·ªÉm trail
            if len(self.trail_points) > 10:
                self.trail_points.pop(0)

        # If target alive -> home to it
        if self.target and self.target.alive:
            tx, ty = self.target.pos()
            dx, dy = tx - self.x, ty - self.y
            dist = math.hypot(dx, dy)

            spd = math.hypot(self.vx, self.vy)
            if spd <= 1e-6:
                spd = PROJECTILE_SPEED

            if dist <= max(10.0, spd * dt):
                self.alive = False
                self.target.hit(self.damage)
                if self.slow_time > 0:
                    self.target.apply_slow(self.slow_mul, self.slow_time)
                # üÜï Apply poison effect
                if self.poison_time > 0:
                    self.target.apply_poison(self.poison_damage, self.poison_time)
                if self.splash > 0:
                    r2 = self.splash * self.splash
                    for e in enemies:
                        if e is self.target or not e.alive:
                            continue
                        ex, ey = e.pos()
                        if (ex - tx) ** 2 + (ey - ty) ** 2 <= r2:
                            e.hit(self.damage * 0.8)
                            if self.slow_time > 0:
                                e.apply_slow(self.slow_mul, self.slow_time)
                            # üÜï Apply poison to splash targets too
                            if self.poison_time > 0:
                                e.apply_poison(self.poison_damage, self.poison_time)
                return
            dirx, diry = dx / dist, dy / dist
            self.vx, self.vy = dirx * spd, diry * spd

        # Move
        self.x += self.vx * dt
        self.y += self.vy * dt

        # Out of screen
        if not (0 <= self.x <= WIDTH and 0 <= self.y <= HEIGHT):
            self.alive = False


@dataclass
class Tower:
    gx: int
    gy: int
    ttype: str = "gun"
    level: int = 1
    range: float = 150
    fire_rate: float = 0.8
    cooldown: float = 0.0
    damage: int = 25
    angle: float = 0.0
    splash: float = 0.0
    slow_mul: float = 1.0
    slow_time: float = 0.0
    poison_damage: float = 0.0  # üÜï Poison damage per second
    poison_time: float = 0.0    # üÜï Poison duration

    def center(self) -> Tuple[float, float]:
        return grid_to_px(self.gx, self.gy)

    def update(self, dt: float):
        self.cooldown = max(0.0, self.cooldown - dt)

    def aim(self, enemies):
        cx, cy = self.center()
        nearest = None
        best_dy = float("inf")
        from config import H_RANGE_PX
        for e in enemies:
            if not e.alive:
                continue
            ex, ey = e.pos()
            dy = abs(ey - cy)
            dx = abs(ex - cx)
            if dy <= self.range and dx <= H_RANGE_PX and dy < best_dy:
                best_dy = dy
                nearest = (ex, ey)
        if nearest:
            ex, ey = nearest
            self.angle = math.atan2(ey - cy, ex - cx)

    def try_fire(self, enemies):
        if self.cooldown > 0:
            return None
        cx, cy = self.center()

        target = None
        best_prog = -1
        for e in enemies:
            if not e.alive:
                continue
            ex, ey = e.pos()
            from config import H_RANGE_PX
            if abs(ey - cy) <= self.range and abs(ex - cx) <= H_RANGE_PX:
                prog = e.idx
                if prog > best_prog:
                    best_prog = prog
                    target = e

        if not target:
            return None

        tx, ty = target.pos()
        dx, dy = tx - cx, ty - cy
        dist = math.hypot(dx, dy) or 1.0
        
        # üÜï T·ªëc ƒë·ªô v√† lo·∫°i projectile d·ª±a tr√™n th√°p
        speed = PROJECTILE_SPEED
        projectile_type = "basic"
        max_lifetime = 3.0
        special_data = {}
        
        if self.ttype == "sniper":
            speed = PROJECTILE_SPEED * 1.1
            projectile_type = "sniper"
        elif self.ttype == "laser":
            speed = PROJECTILE_SPEED * 2.0
            projectile_type = "laser"
            max_lifetime = 1.5  # Laser nhanh, s·ªëng ng·∫Øn
        elif self.ttype == "rocket":
            speed = PROJECTILE_SPEED * 0.7
            projectile_type = "rocket" 
            max_lifetime = 4.0  # Rocket ch·∫≠m, s·ªëng l√¢u
        elif self.ttype == "electric":
            speed = PROJECTILE_SPEED * 1.3
            projectile_type = "electric"
            special_data = {"chain_count": 0, "max_chains": 3}
        elif self.ttype == "poison":
            speed = PROJECTILE_SPEED * 0.9
            projectile_type = "poison"
        elif self.ttype == "flame":
            speed = PROJECTILE_SPEED * 1.1
            projectile_type = "flame"
        elif self.ttype == "ice":
            speed = PROJECTILE_SPEED * 0.8
            projectile_type = "ice"
        elif self.ttype == "minigun":
            speed = PROJECTILE_SPEED * 1.4
            projectile_type = "minigun"
        elif self.ttype == "mortar":
            speed = PROJECTILE_SPEED * 0.5
            projectile_type = "mortar"
            max_lifetime = 5.0  # Mortar bay cao, s·ªëng l√¢u
            
        vx, vy = (dx / dist) * speed, (dy / dist) * speed
        self.cooldown = 1.0 / self.fire_rate
        
        return Projectile(
            cx, cy, vx, vy, self.damage, target,
            splash=self.splash, slow_mul=self.slow_mul, slow_time=self.slow_time,
            poison_damage=self.poison_damage, poison_time=self.poison_time,  # üÜï Poison data
            projectile_type=projectile_type, trail_points=[], rotation=0.0,
            lifetime=0.0, max_lifetime=max_lifetime, special_data=special_data
        )

    def can_upgrade(self) -> bool:
        return self.level < 3

    def upgrade_cost(self) -> int:
        if self.level<=2:
            return TOWER_UPGRADE[self.level-1]["cost"]
        return 10**9

    def apply_upgrade(self):
        if not self.can_upgrade():
            return
        u = TOWER_UPGRADE[self.level-1]
        self.level += 1
        self.range = int(self.range * u["range"])  
        self.fire_rate = self.fire_rate * u["firerate"]
        self.damage = int(self.damage * u["damage"])